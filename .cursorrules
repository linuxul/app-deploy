# 앱 배포 센터 (App Distribution Center) - Cursor AI 룰

## 🎯 프로젝트 개요
Firebase App Distribution과 유사한 안드로이드 앱 배포 사이트입니다.
- **백엔드**: Node.js + Express + MongoDB + TypeScript
- **프론트엔드**: Vue 3 + Vite + Bootstrap 5 + TypeScript
- **인프라**: Docker + Docker Compose

## 🏗️ 아키텍처 원칙
1. **모듈화**: 기능별로 명확하게 분리된 구조
2. **타입 안전성**: TypeScript를 적극 활용하여 타입 오류 방지
3. **보안 우선**: 기본적으로 안전한 설정, 필요시 보안 강화
4. **확장성**: 새로운 기능 추가가 용이한 구조

## 📝 코딩 스타일

### TypeScript
- **엄격 모드**: `strict: true` 설정 준수
- **타입 정의**: 모든 함수, 변수에 명시적 타입 지정
- **인터페이스**: API 응답, 요청 데이터에 인터페이스 정의
- **제네릭**: 재사용 가능한 컴포넌트에 제네릭 활용

### 백엔드 (Node.js/Express)
- **에러 처리**: 모든 비동기 함수에 try-catch 적용
- **미들웨어**: 기능별로 분리된 미들웨어 구조
- **라우터**: RESTful API 설계 원칙 준수
- **검증**: 입력 데이터 검증 및 sanitization

### 프론트엔드 (Vue 3)
- **Composition API**: `<script setup>` 문법 우선 사용
- **반응형 데이터**: `ref`, `reactive` 적절히 활용
- **컴포넌트**: 단일 책임 원칙에 따른 컴포넌트 분리
- **타입**: Vue 컴포넌트 props, emits에 타입 정의

## 🔒 보안 가이드라인

### 기본 보안
- **파일 업로드**: 확장자 검증, 크기 제한, MIME 타입 확인
- **입력 검증**: 모든 사용자 입력에 대한 검증 및 sanitization
- **에러 메시지**: 민감한 정보가 노출되지 않는 에러 처리
- **CORS**: 적절한 CORS 설정으로 CSRF 공격 방지

### 인증 및 권한
- **업로드 키**: 환경변수로 관리되는 업로드 인증
- **레이트 리밋**: API 요청 제한으로 DDoS 방지
- **로깅**: 보안 관련 이벤트 로깅 및 모니터링

## 🚀 개발 워크플로우

### 코드 작성 시
1. **기능 분석**: 요구사항을 명확히 파악
2. **아키텍처 설계**: 확장 가능한 구조로 설계
3. **타입 정의**: TypeScript 인터페이스 먼저 작성
4. **구현**: 기능 구현 및 테스트
5. **문서화**: 코드 주석 및 README 업데이트

### 리팩토링 시
1. **기존 기능 보존**: 기존 API 호환성 유지
2. **점진적 개선**: 한 번에 모든 것을 바꾸지 말고 단계별 개선
3. **테스트**: 변경사항에 대한 테스트 코드 작성

## 📁 파일 구조 규칙

### 백엔드
```
server/src/
├── models/          # MongoDB 스키마 및 모델
├── routes/          # API 엔드포인트 라우터
├── middlewares/     # 미들웨어 함수들
├── utils/           # 유틸리티 함수들
├── config.ts        # 환경 설정
└── index.ts         # 서버 진입점
```

### 프론트엔드
```
web/src/
├── pages/           # 페이지 컴포넌트
├── components/      # 재사용 가능한 컴포넌트
├── api/             # API 통신 관련
├── types/           # TypeScript 타입 정의
├── utils/           # 유틸리티 함수들
└── router/          # 라우팅 설정
```

## 🧪 테스트 및 품질

### 코드 품질
- **ESLint**: 코드 스타일 및 잠재적 오류 검사
- **Prettier**: 일관된 코드 포맷팅
- **TypeScript**: 컴파일 타임 타입 검사

### 테스트 전략
- **단위 테스트**: 개별 함수/컴포넌트 테스트
- **통합 테스트**: API 엔드포인트 테스트
- **E2E 테스트**: 사용자 시나리오 기반 테스트

## 🔧 개발 도구 설정

### 필수 확장 프로그램
- **TypeScript**: 타입 체크 및 IntelliSense
- **Vue Language Features**: Vue 컴포넌트 지원
- **ESLint**: 코드 품질 검사
- **Prettier**: 코드 포맷팅

### 환경 설정
- **Node.js**: 18+ 버전 사용
- **npm**: 패키지 매니저
- **Docker**: 컨테이너화 및 배포

## 📚 학습 리소스

### 백엔드
- Express.js 공식 문서
- MongoDB Mongoose 가이드
- Node.js TypeScript 설정

### 프론트엔드
- Vue 3 Composition API
- Bootstrap 5 컴포넌트
- Vite 빌드 도구

## ⚠️ 주의사항

### 보안 관련
- **파일 업로드**: 악성 파일 업로드 위험 항상 고려
- **API 노출**: 민감한 정보가 API 응답에 포함되지 않도록 주의
- **환경변수**: .env 파일을 Git에 커밋하지 않음

### 성능 관련
- **파일 크기**: 업로드 파일 크기 제한 및 압축 고려
- **데이터베이스**: 인덱싱 및 쿼리 최적화
- **캐싱**: 정적 파일 및 API 응답 캐싱 전략

## 🎉 성공 지표

### 코드 품질
- TypeScript 컴파일 오류 0개
- ESLint 경고 최소화
- 테스트 커버리지 80% 이상

### 사용자 경험
- 페이지 로딩 시간 3초 이내
- 모바일 반응형 디자인
- 직관적인 사용자 인터페이스

### 보안
- 보안 취약점 0개
- 정기적인 보안 업데이트
- 로그 및 모니터링 시스템

---

**마지막 업데이트**: 2024년  
**버전**: 1.0.0  
**담당자**: 개발팀 